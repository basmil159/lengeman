[{"H:\\React\\blackbox-react\\src\\components\\Sidebar.jsx":"1","H:\\React\\blackbox-react\\src\\App.js":"2","H:\\React\\blackbox-react\\src\\components\\Jobs.jsx":"3","H:\\React\\Lengeman\\src\\index.js":"4","H:\\React\\Lengeman\\src\\App.js":"5","H:\\React\\Lengeman\\src\\components\\Sidebar.jsx":"6","H:\\React\\Lengeman\\src\\components\\Jobs.jsx":"7","H:\\React\\Lengeman\\src\\components\\Svgs.jsx":"8","H:\\React\\Lengeman\\src\\components\\Modal.jsx":"9"},{"size":3656,"mtime":1660619227986,"results":"10","hashOfConfig":"11"},{"size":888,"mtime":1660542297590,"results":"12","hashOfConfig":"11"},{"size":5453,"mtime":1660622584040,"results":"13","hashOfConfig":"11"},{"size":390,"mtime":1660021757994,"results":"14","hashOfConfig":"15"},{"size":773,"mtime":1661139106623,"results":"16","hashOfConfig":"15"},{"size":3809,"mtime":1661139499475,"results":"17","hashOfConfig":"15"},{"size":5453,"mtime":1660622584040,"results":"18","hashOfConfig":"15"},{"size":205,"mtime":1659941329586,"results":"19","hashOfConfig":"15"},{"size":7927,"mtime":1659941329585,"results":"20","hashOfConfig":"15"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vsyzpz",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"yg3kdk",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},"H:\\React\\blackbox-react\\src\\components\\Sidebar.jsx",[],[],"H:\\React\\blackbox-react\\src\\App.js",[],[],"H:\\React\\blackbox-react\\src\\components\\Jobs.jsx",["51","52"],[],"H:\\React\\Lengeman\\src\\index.js",[],[],["53","54"],"H:\\React\\Lengeman\\src\\App.js",[],[],"H:\\React\\Lengeman\\src\\components\\Sidebar.jsx",[],[],"H:\\React\\Lengeman\\src\\components\\Jobs.jsx",["55","56"],[],"import Modal from \"./Modal\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction jobTitles(args) {\r\n  if (args === \"To-Do\") return \"job__status--to-do\";\r\n  if (args === \"In Progress\") return \"job__status--progress\";\r\n  if (args === \"Done\") return \"job__status--done\";\r\n}\r\n\r\nfunction jobLists(args) {\r\n  if (args === \"To-Do\") return \"job__status-list--to-do\";\r\n  if (args === \"In Progress\") return \"job__status-list--progress\";\r\n  if (args === \"Done\") return \"job__status-list--done\";\r\n}\r\n\r\nconst todoJobs = [\r\n  [\"Job#1\", \"Not initialised\"],\r\n  [\"Job#2\", \"Initalised\"],\r\n  [\"Job#3\", \"Underway\"],\r\n];\r\n\r\nconst inProgJobs = [\r\n  [\"Job#1\", \"55% completed\"],\r\n  [\"Job#2\", \"75% completed\"],\r\n  [\"Job#3\", \"85% completed\"],\r\n];\r\nconst doneJobs = [\r\n  [\"Job#1\", \"Feb 22, 2022\"],\r\n  [\"Job#2\", \"Feb 23, 2020\"],\r\n  [\"Job#3\", \"Feb 02, 2019\"],\r\n];\r\n\r\n/**\r\n * @Job component receives title, icon and jobDetails props\r\n * @title  - title of each job card,\r\n * @icon - if icon=true, we display the arrow icons in TODO card section, refer JobField\r\n *    --> if icon=true, we return JObField component optimized for TODO\r\n *    --> else return JobField for In-progress and done\r\n * @jobDetails - is an array containing array.\r\n */\r\n\r\nconst JobField = (props) => {\r\n  return (\r\n    <div className=\"job__status-list job__status-list--add\">\r\n      {/* props.icon passes from Job component inside Jobs to JobFields, refer top comment for more detail */}\r\n      {props.icon ? (\r\n        <svg\r\n          className=\"big-svg job__status-list--priority\"\r\n          fill={props.fill}\r\n          style={{ transform: props.rotate }}\r\n        >\r\n          <title>{props.priority} Priority</title>\r\n          <use xlinkHref=\"img/blackbox.svg#arrow-up-red\"></use>\r\n        </svg>\r\n      ) : null}\r\n\r\n      <div className=\"job__status-list--text\">\r\n        <h2> {props.jobDetails[0]} </h2>\r\n        <p> {props.jobDetails[1]}</p>\r\n      </div>\r\n      <div className=\"job__status-list--delete-info\">\r\n        <svg className=\"small-svg job__status-list--delete\">\r\n          <use xlinkHref=\"img/blackbox.svg#delete\"></use>\r\n        </svg>\r\n        <svg className=\"small-svg job__status-list--info\">\r\n          <use xlinkHref=\"img/blackbox.svg#error\"></use>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Job = (props) => {\r\n  \r\n  return (\r\n    <div className={`job ${props.title}`}>\r\n      <div className=\"job__status\">\r\n        <h3 className={jobTitles(props.title)}>{props.title}</h3>\r\n        <svg className=\"small-svg\">\r\n          <use xlinkHref=\"img/blackbox.svg#filter_list\"></use>\r\n        </svg>\r\n      </div>\r\n    <div className={jobLists(props.title)}>\r\n      {props.icon ? (\r\n        <>\r\n          {/**\r\n           * props.jobDetails is a 2d array, so every index has another array\r\n           * example, for TODO card,\r\n           * {props.jobDetails} = [['Job#1', 'Not initialized'],['Job#2', 'Initialized'],['Job#3', 'Underway']]\r\n           * {props.jobDetails[0]} = ['Job#1', 'Not initialized'],\r\n           * {props.jobDetails[1]} = ['Job#2', 'Initialized'] and so on\r\n           * this individual index values of {props.jobDetails} are passed to JobField Component as props\r\n           * along with fill and icon\r\n           */}\r\n\r\n          <JobField\r\n            jobDetails={props.jobDetails[0]}\r\n            icon={props.icon}\r\n            priority=\"High\"\r\n            fill=\"#D80027\"\r\n          />\r\n          <JobField\r\n            jobDetails={props.jobDetails[1]}\r\n            icon={props.icon}\r\n            priority=\"Medium\"\r\n            fill=\"#FB7925\"\r\n          />\r\n          <JobField\r\n            jobDetails={props.jobDetails[2]}\r\n            icon={props.icon}\r\n            priority=\"Low\"\r\n            fill=\"#686868\"\r\n            rotate=\"rotate(180deg\"\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <JobField jobDetails={props.jobDetails[0]} />\r\n          <JobField jobDetails={props.jobDetails[1]} />\r\n          <JobField jobDetails={props.jobDetails[2]} />\r\n        </>\r\n      )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Jobs = () => {\r\n  const [openModal, setOpenModal] = useState(false);\r\n  return (\r\n    <>\r\n    <div classname=\"job__topbar\" style={{display:\"flex\", width:\"100%\", justifyContent:\"space-between\"}}>\r\n    <div className=\"job__status-add\">\r\n          <a href=\"#\" className=\"job__status-add--btn\">\r\n             <h3\r\n              onClick={() => {\r\n                setOpenModal(true); //opens modal box on click by setting openModel to true\r\n              }}\r\n              >\r\n              Add Job\r\n            </h3>\r\n          </a>\r\n    </div>\r\n    <div className=\"job__status-add\">\r\n          <a href=\"#\" className=\"job__status-add--btn\">\r\n            <svg className=\"small-svg\">\r\n              <use xlinkHref=\"img/blackbox.svg#add\"></use>\r\n            </svg>\r\n            <h3\r\n              onClick={() => {\r\n                setOpenModal(true); //opens modal box on click by setting openModel to true\r\n              }}\r\n              >\r\n              Add Job\r\n            </h3>\r\n          </a>\r\n          {openModal && <Modal hideModal={setOpenModal} />}\r\n          {/* opens modal box if openModel is set true  */}\r\n        </div>\r\n        </div>\r\n    <section className=\"jobs\">\r\n      <Job title=\"To-Do\" icon={true} jobDetails={todoJobs} />\r\n      <Job title=\"In Progress\" jobDetails={inProgJobs} />\r\n      <Job title=\"Done\" jobDetails={doneJobs} />\r\n    </section>\r\n              </>\r\n  );\r\n};\r\n","H:\\React\\Lengeman\\src\\components\\Svgs.jsx",[],[],"H:\\React\\Lengeman\\src\\components\\Modal.jsx",["57","58","59","60","61","62"],[],"import React, { useState } from \"react\";\r\n\r\n// firts Section of the modal box where users can choose file or add job manually\r\nconst Addjob = (props) => {\r\n  return (\r\n    <div className=\"addJob\">\r\n      <button className=\"addJob__file\">load from file</button>\r\n      <button\r\n        className=\"addJob__manually\"\r\n        onClick={() => {\r\n          props.showSelectJob(true);\r\n          props.hideSelf(false);\r\n        }}\r\n      >\r\n        create jobs manually\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Second Section of the modal box where user selects the jobs to be created\r\nconst Selectjob = (props) => {\r\n  const jobs = [\r\n    \"Create three circles\",\r\n    \"Cut the circles in the middle\",\r\n    \"Load Vaccum\",\r\n  ]; //All the jobs that can be assigned\r\n  const vaccumTypes = [\"Vaccum 1\", \"Vaccum 2\", \"Vaccum 3\"];\r\n  const [newJobs, setNewJobs] = useState([jobs[0]]); //to get all the jobs selected by user in \"newJobs \"array\r\n  const [vaccums, setVaccums] = useState(vaccumTypes[0]); //to get the vaccum type selected by user\r\n\r\n  console.log(newJobs);\r\n  console.log(vaccums);\r\n\r\n  // This function enable to select multi job when add new job button is clicked\r\n  const handleJobAdd = () => {\r\n    setNewJobs([...newJobs, \"\"]);\r\n  };\r\n\r\n  // This function helps to get the user selected data from dropdown and update a state.\r\n  const handelNewChanges = (e, index, type) => {\r\n    const { value } = e.target;\r\n    if (type == \"job\") {\r\n      const jobs = [...newJobs];\r\n      jobs[index] = value;\r\n      setNewJobs(jobs);\r\n      setVaccums(\"\");\r\n    } else {\r\n      setVaccums(type);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {newJobs.map((newjob, index) => (\r\n        <div className=\"selectJob\">\r\n          {index < 1 && <h3> select job </h3>}\r\n          {index > 0 && <h3> select job {index + 1}</h3>}\r\n          <br />\r\n          <select\r\n            name=\"newJobs\"\r\n            id={`selectnewJobs${index + 1}`}\r\n            value={newJobs[index]}\r\n            onChange={(e) => handelNewChanges(e, index, \"job\")}\r\n          >\r\n            {jobs.map((job, index) => (\r\n              <option key={index} value={job}>\r\n                {job}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          {/* //dependent dropdrown  */}\r\n          {newJobs[index] == jobs[2] && (\r\n            <div className=\"selectJob\">\r\n              <br />\r\n              <h3>Vaccum Type</h3>\r\n              <br />\r\n              <select\r\n                name=\"vaccum\"\r\n                id={`vaccum${index + 1}`}\r\n                value={vaccums[index]}\r\n              >\r\n                {vaccumTypes.map((vaccum, index) => (\r\n                  <option\r\n                    key={index}\r\n                    value={vaccum}\r\n                    onClick={(e) => handelNewChanges(e, index, { vaccum })}\r\n                  >\r\n                    {vaccum}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* this condition will only let the user to add max 3 jobs by disabling or  hidding the add new job after user select max 3 jobs */}\r\n          {newJobs.length - 1 === index && newJobs.length < 3 && (\r\n            <div href=\"\" className=\"selectJob__addbtn\" onClick={handleJobAdd}>\r\n              <svg className=\"small-svg\" fill=\"#4A4A4A\">\r\n                <use xlinkHref=\"img/blackbox.svg#addbtn\"></use>\r\n              </svg>\r\n              <span>Add new job</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// Third Section of the Modal box where use can load vaccum cover and create a job\r\nconst SelectVaccum = (props) => {\r\n  const [vaccumCovers, setVaccumCovers] = useState([\"\"]);\r\n  const items = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\r\n\r\n  // this function update the state and store the user selected cover into vaccumCovers array\r\n  const handelNewChanges = (e, index) => {\r\n    const { value } = e.target;\r\n    const covers = [...vaccumCovers];\r\n    covers[index] = value;\r\n\r\n    setVaccumCovers(covers);\r\n  };\r\n\r\n  // Filter out the empty elements of the array\r\n  const filterVaccumCovers = vaccumCovers.filter((e) => {\r\n    return e !== null && e !== undefined && e !== \"\";\r\n  });\r\n\r\n  return (\r\n    <div className=\"selectVaccum\">\r\n      <h3>Load Vaccum Cover</h3>\r\n\r\n      <div className=\"selectVaccum__vaccum-cover\">\r\n        {items.map((item, index) => (\r\n          <>\r\n            <h2 key={index}>\r\n              <span> {item}</span>\r\n              {Array.apply(0, Array(13)).map((num, i) => (\r\n                <input\r\n                  key={i}\r\n                  type=\"radio\"\r\n                  id={`${item}${i + 1}`}\r\n                  name={`vaccum_cover-${item}`}\r\n                  value={`${item}${i + 1}`}\r\n                  onClick={(e) => handelNewChanges(e, index)}\r\n                />\r\n              ))}\r\n            </h2>\r\n          </>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Displays the user selected columns  */}\r\n      <div className=\"selectVaccum__selectedCover\">\r\n        <h3>Selected Columns</h3>\r\n        <br />\r\n\r\n        {filterVaccumCovers.map((cover, index) => (\r\n          <span>\r\n            {filterVaccumCovers.length - 1 != index && <>{cover}, </>}\r\n            {filterVaccumCovers.length - 1 === index && <> {cover}</>}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Modal = (props) => {\r\n  const [showAddJob, setShowAddJob] = useState(true);\r\n  const [showSelectJob, setShowSelectJob] = useState(false);\r\n  const [showSelectVaccum, setShowSelectVaccum] = useState(false);\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      onClick={() => {\r\n        setShowAddJob(true);\r\n        setShowSelectJob(false);\r\n        props.hideModal(false);\r\n      }} //for closing and reseting the modal box when clicked outside the box\r\n    >\r\n      <div className=\"modal__container\" onClick={(e) => e.stopPropagation()}>\r\n        {/* Preventing the close of modal box when clicked inside the box */}\r\n        <div className=\"modal__title\">\r\n          <h3>Add job</h3>\r\n\r\n          <svg\r\n            className=\"big-svg\"\r\n            fill=\"#4A4A4A\"\r\n            onClick={() => {\r\n              props.hideModal(false);\r\n            }}\r\n            // closes the modal box when clicked\r\n          >\r\n            <use xlinkHref=\"img/blackbox.svg#close\"></use>\r\n          </svg>\r\n        </div>\r\n        <div className=\"modal__body\">\r\n          {showAddJob && (\r\n            <Addjob showSelectJob={setShowSelectJob} hideSelf={setShowAddJob} />\r\n          )}{\" \"}\r\n          {/* Shows 1st secton of modal box when true */}\r\n          {showSelectJob && <Selectjob />}{\" \"}\r\n          {/* Shows 2nd secton of modal box i.e. selecting the jobs to be created when true */}\r\n          {showSelectVaccum && <SelectVaccum />}{\" \"}\r\n          {/* Shows 3rd secton of modal box i.e. selecting the vaccum cover when the result is true */}\r\n        </div>\r\n        <div className=\"modal__btns\">\r\n          {showAddJob == false && (\r\n            <button\r\n              onClick={() => {\r\n                setShowAddJob(true);\r\n                setShowSelectJob(false);\r\n                props.hideModal(false);\r\n              }}\r\n              // closes and reset the modal box\r\n            >\r\n              Cancel\r\n            </button>\r\n          )}\r\n\r\n          {showSelectJob == true && (\r\n            <button\r\n              onClick={() => {\r\n                setShowSelectJob(false);\r\n                setShowSelectVaccum(true);\r\n              }}\r\n            >\r\n              Next\r\n            </button>\r\n          )}\r\n          {showSelectVaccum == true && (\r\n            <button\r\n              onClick={() => {\r\n                setShowSelectJob(false);\r\n                setShowSelectVaccum(true);\r\n              }}\r\n            >\r\n              Create Job\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n",{"ruleId":"63","severity":1,"message":"64","line":135,"column":11,"nodeType":"65","endLine":135,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":146,"column":11,"nodeType":"65","endLine":146,"endColumn":56},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"63","severity":1,"message":"64","line":135,"column":11,"nodeType":"65","endLine":135,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":146,"column":11,"nodeType":"65","endLine":146,"endColumn":56},{"ruleId":"70","severity":1,"message":"71","line":43,"column":14,"nodeType":"72","messageId":"73","endLine":43,"endColumn":16},{"ruleId":"70","severity":1,"message":"71","line":74,"column":27,"nodeType":"72","messageId":"73","endLine":74,"endColumn":29},{"ruleId":"70","severity":1,"message":"74","line":162,"column":44,"nodeType":"72","messageId":"73","endLine":162,"endColumn":46},{"ruleId":"70","severity":1,"message":"71","line":211,"column":23,"nodeType":"72","messageId":"73","endLine":211,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":224,"column":26,"nodeType":"72","messageId":"73","endLine":224,"endColumn":28},{"ruleId":"70","severity":1,"message":"71","line":234,"column":29,"nodeType":"72","messageId":"73","endLine":234,"endColumn":31},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["75"],"no-negated-in-lhs",["76"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]