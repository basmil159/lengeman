{"ast":null,"code":"import _slicedToArray from\"H:/React/Lengeman/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import Modal from\"./Modal\";import React,{useState}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function jobTitles(args){if(args===\"To-Do\")return\"job__status--to-do\";if(args===\"In Progress\")return\"job__status--progress\";if(args===\"Done\")return\"job__status--done\";}function jobLists(args){if(args===\"To-Do\")return\"job__status-list--to-do\";if(args===\"In Progress\")return\"job__status-list--progress\";if(args===\"Done\")return\"job__status-list--done\";}var todoJobs=[[\"Job#1\",\"Not initialised\"],[\"Job#2\",\"Initalised\"],[\"Job#3\",\"Underway\"]];var inProgJobs=[[\"Job#1\",\"55% completed\"],[\"Job#2\",\"75% completed\"],[\"Job#3\",\"85% completed\"]];var doneJobs=[[\"Job#1\",\"Feb 22, 2022\"],[\"Job#2\",\"Feb 23, 2020\"],[\"Job#3\",\"Feb 02, 2019\"]];/**\r\n * @Job component receives title, icon and jobDetails props\r\n * @title  - title of each job card,\r\n * @icon - if icon=true, we display the arrow icons in TODO card section, refer JobField\r\n *    --> if icon=true, we return JObField component optimized for TODO\r\n *    --> else return JobField for In-progress and done\r\n * @jobDetails - is an array containing array.\r\n */var JobField=function JobField(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"job__status-list job__status-list--add\",children:[props.icon?/*#__PURE__*/_jsxs(\"svg\",{className:\"big-svg job__status-list--priority\",fill:props.fill,style:{transform:props.rotate},children:[/*#__PURE__*/_jsxs(\"title\",{children:[props.priority,\" Priority\"]}),/*#__PURE__*/_jsx(\"use\",{xlinkHref:\"img/blackbox.svg#arrow-up-red\"})]}):null,/*#__PURE__*/_jsxs(\"div\",{className:\"job__status-list--text\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\" \",props.jobDetails[0],\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\" \",props.jobDetails[1]]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"job__status-list--delete-info\",children:[/*#__PURE__*/_jsx(\"svg\",{className:\"small-svg job__status-list--delete\",children:/*#__PURE__*/_jsx(\"use\",{xlinkHref:\"img/blackbox.svg#delete\"})}),/*#__PURE__*/_jsx(\"svg\",{className:\"small-svg job__status-list--info\",children:/*#__PURE__*/_jsx(\"use\",{xlinkHref:\"img/blackbox.svg#error\"})})]})]});};var Job=function Job(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"job \".concat(props.title),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"job__status\",children:[/*#__PURE__*/_jsx(\"h3\",{className:jobTitles(props.title),children:props.title}),/*#__PURE__*/_jsx(\"svg\",{className:\"small-svg\",children:/*#__PURE__*/_jsx(\"use\",{xlinkHref:\"img/blackbox.svg#filter_list\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:jobLists(props.title),children:props.icon?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(JobField,{jobDetails:props.jobDetails[0],icon:props.icon,priority:\"High\",fill:\"#D80027\"}),/*#__PURE__*/_jsx(JobField,{jobDetails:props.jobDetails[1],icon:props.icon,priority:\"Medium\",fill:\"#FB7925\"}),/*#__PURE__*/_jsx(JobField,{jobDetails:props.jobDetails[2],icon:props.icon,priority:\"Low\",fill:\"#686868\",rotate:\"rotate(180deg\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(JobField,{jobDetails:props.jobDetails[0]}),/*#__PURE__*/_jsx(JobField,{jobDetails:props.jobDetails[1]}),/*#__PURE__*/_jsx(JobField,{jobDetails:props.jobDetails[2]})]})})]});};export var Jobs=function Jobs(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),openModal=_useState2[0],setOpenModal=_useState2[1];return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{classname:\"job__topbar\",style:{display:\"flex\",width:\"100%\",justifyContent:\"space-between\"},children:[/*#__PURE__*/_jsx(\"div\",{className:\"job__status-add\",children:/*#__PURE__*/_jsx(\"a\",{href:\"#\",className:\"job__status-add--btn\",children:/*#__PURE__*/_jsx(\"h3\",{onClick:function onClick(){setOpenModal(true);//opens modal box on click by setting openModel to true\n},children:\"Add Job\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"job__status-add\",children:[/*#__PURE__*/_jsxs(\"a\",{href:\"#\",className:\"job__status-add--btn\",children:[/*#__PURE__*/_jsx(\"svg\",{className:\"small-svg\",children:/*#__PURE__*/_jsx(\"use\",{xlinkHref:\"img/blackbox.svg#add\"})}),/*#__PURE__*/_jsx(\"h3\",{onClick:function onClick(){setOpenModal(true);//opens modal box on click by setting openModel to true\n},children:\"Add Job\"})]}),openModal&&/*#__PURE__*/_jsx(Modal,{hideModal:setOpenModal})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"jobs\",children:[/*#__PURE__*/_jsx(Job,{title:\"To-Do\",icon:true,jobDetails:todoJobs}),/*#__PURE__*/_jsx(Job,{title:\"In Progress\",jobDetails:inProgJobs}),/*#__PURE__*/_jsx(Job,{title:\"Done\",jobDetails:doneJobs})]})]});};","map":{"version":3,"sources":["H:/React/Lengeman/src/components/Jobs.jsx"],"names":["Modal","React","useState","jobTitles","args","jobLists","todoJobs","inProgJobs","doneJobs","JobField","props","icon","fill","transform","rotate","priority","jobDetails","Job","title","Jobs","openModal","setOpenModal","display","width","justifyContent"],"mappings":"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","sourcesContent":["import Modal from \"./Modal\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction jobTitles(args) {\r\n  if (args === \"To-Do\") return \"job__status--to-do\";\r\n  if (args === \"In Progress\") return \"job__status--progress\";\r\n  if (args === \"Done\") return \"job__status--done\";\r\n}\r\n\r\nfunction jobLists(args) {\r\n  if (args === \"To-Do\") return \"job__status-list--to-do\";\r\n  if (args === \"In Progress\") return \"job__status-list--progress\";\r\n  if (args === \"Done\") return \"job__status-list--done\";\r\n}\r\n\r\nconst todoJobs = [\r\n  [\"Job#1\", \"Not initialised\"],\r\n  [\"Job#2\", \"Initalised\"],\r\n  [\"Job#3\", \"Underway\"],\r\n];\r\n\r\nconst inProgJobs = [\r\n  [\"Job#1\", \"55% completed\"],\r\n  [\"Job#2\", \"75% completed\"],\r\n  [\"Job#3\", \"85% completed\"],\r\n];\r\nconst doneJobs = [\r\n  [\"Job#1\", \"Feb 22, 2022\"],\r\n  [\"Job#2\", \"Feb 23, 2020\"],\r\n  [\"Job#3\", \"Feb 02, 2019\"],\r\n];\r\n\r\n/**\r\n * @Job component receives title, icon and jobDetails props\r\n * @title  - title of each job card,\r\n * @icon - if icon=true, we display the arrow icons in TODO card section, refer JobField\r\n *    --> if icon=true, we return JObField component optimized for TODO\r\n *    --> else return JobField for In-progress and done\r\n * @jobDetails - is an array containing array.\r\n */\r\n\r\nconst JobField = (props) => {\r\n  return (\r\n    <div className=\"job__status-list job__status-list--add\">\r\n      {/* props.icon passes from Job component inside Jobs to JobFields, refer top comment for more detail */}\r\n      {props.icon ? (\r\n        <svg\r\n          className=\"big-svg job__status-list--priority\"\r\n          fill={props.fill}\r\n          style={{ transform: props.rotate }}\r\n        >\r\n          <title>{props.priority} Priority</title>\r\n          <use xlinkHref=\"img/blackbox.svg#arrow-up-red\"></use>\r\n        </svg>\r\n      ) : null}\r\n\r\n      <div className=\"job__status-list--text\">\r\n        <h2> {props.jobDetails[0]} </h2>\r\n        <p> {props.jobDetails[1]}</p>\r\n      </div>\r\n      <div className=\"job__status-list--delete-info\">\r\n        <svg className=\"small-svg job__status-list--delete\">\r\n          <use xlinkHref=\"img/blackbox.svg#delete\"></use>\r\n        </svg>\r\n        <svg className=\"small-svg job__status-list--info\">\r\n          <use xlinkHref=\"img/blackbox.svg#error\"></use>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Job = (props) => {\r\n  \r\n  return (\r\n    <div className={`job ${props.title}`}>\r\n      <div className=\"job__status\">\r\n        <h3 className={jobTitles(props.title)}>{props.title}</h3>\r\n        <svg className=\"small-svg\">\r\n          <use xlinkHref=\"img/blackbox.svg#filter_list\"></use>\r\n        </svg>\r\n      </div>\r\n    <div className={jobLists(props.title)}>\r\n      {props.icon ? (\r\n        <>\r\n          {/**\r\n           * props.jobDetails is a 2d array, so every index has another array\r\n           * example, for TODO card,\r\n           * {props.jobDetails} = [['Job#1', 'Not initialized'],['Job#2', 'Initialized'],['Job#3', 'Underway']]\r\n           * {props.jobDetails[0]} = ['Job#1', 'Not initialized'],\r\n           * {props.jobDetails[1]} = ['Job#2', 'Initialized'] and so on\r\n           * this individual index values of {props.jobDetails} are passed to JobField Component as props\r\n           * along with fill and icon\r\n           */}\r\n\r\n          <JobField\r\n            jobDetails={props.jobDetails[0]}\r\n            icon={props.icon}\r\n            priority=\"High\"\r\n            fill=\"#D80027\"\r\n          />\r\n          <JobField\r\n            jobDetails={props.jobDetails[1]}\r\n            icon={props.icon}\r\n            priority=\"Medium\"\r\n            fill=\"#FB7925\"\r\n          />\r\n          <JobField\r\n            jobDetails={props.jobDetails[2]}\r\n            icon={props.icon}\r\n            priority=\"Low\"\r\n            fill=\"#686868\"\r\n            rotate=\"rotate(180deg\"\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <JobField jobDetails={props.jobDetails[0]} />\r\n          <JobField jobDetails={props.jobDetails[1]} />\r\n          <JobField jobDetails={props.jobDetails[2]} />\r\n        </>\r\n      )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Jobs = () => {\r\n  const [openModal, setOpenModal] = useState(false);\r\n  return (\r\n    <>\r\n    <div classname=\"job__topbar\" style={{display:\"flex\", width:\"100%\", justifyContent:\"space-between\"}}>\r\n    <div className=\"job__status-add\">\r\n          <a href=\"#\" className=\"job__status-add--btn\">\r\n             <h3\r\n              onClick={() => {\r\n                setOpenModal(true); //opens modal box on click by setting openModel to true\r\n              }}\r\n              >\r\n              Add Job\r\n            </h3>\r\n          </a>\r\n    </div>\r\n    <div className=\"job__status-add\">\r\n          <a href=\"#\" className=\"job__status-add--btn\">\r\n            <svg className=\"small-svg\">\r\n              <use xlinkHref=\"img/blackbox.svg#add\"></use>\r\n            </svg>\r\n            <h3\r\n              onClick={() => {\r\n                setOpenModal(true); //opens modal box on click by setting openModel to true\r\n              }}\r\n              >\r\n              Add Job\r\n            </h3>\r\n          </a>\r\n          {openModal && <Modal hideModal={setOpenModal} />}\r\n          {/* opens modal box if openModel is set true  */}\r\n        </div>\r\n        </div>\r\n    <section className=\"jobs\">\r\n      <Job title=\"To-Do\" icon={true} jobDetails={todoJobs} />\r\n      <Job title=\"In Progress\" jobDetails={inProgJobs} />\r\n      <Job title=\"Done\" jobDetails={doneJobs} />\r\n    </section>\r\n              </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}