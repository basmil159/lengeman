{"ast":null,"code":"var _jsxFileName = \"H:\\\\React\\\\blackbox-react\\\\src\\\\components\\\\Modal.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // firts Section of the modal box where users can choose file or add job manually\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Addjob = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addJob\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addJob__file\",\n      children: \"load from file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addJob__manually\",\n      onClick: () => {\n        props.showSelectJob(true);\n        props.hideSelf(false);\n      },\n      children: \"create jobs manually\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}; // Second Section of the modal box where user selects the jobs to be created\n\n\n_c = Addjob;\n\nconst Selectjob = props => {\n  _s();\n\n  const jobs = [\"Create three circles\", \"Cut the circles in the middle\", \"Load Vaccum\"]; //All the jobs that can be assigned\n\n  const vaccumTypes = [\"Vaccum 1\", \"Vaccum 2\", \"Vaccum 3\"];\n  const [newJobs, setNewJobs] = useState([jobs[0]]); //to get all the jobs selected by user in \"newJobs \"array\n\n  const [vaccums, setVaccums] = useState(vaccumTypes[0]); //to get the vaccum type selected by user\n\n  console.log(newJobs);\n  console.log(vaccums); // This function enable to select multi job when add new job button is clicked\n\n  const handleJobAdd = () => {\n    setNewJobs([...newJobs, \"\"]);\n  }; // This function helps to get the user selected data from dropdown and update a state.\n\n\n  const handelNewChanges = (e, index, type) => {\n    const {\n      value\n    } = e.target;\n\n    if (type == \"job\") {\n      const jobs = [...newJobs];\n      jobs[index] = value;\n      setNewJobs(jobs);\n      setVaccums(\"\");\n    } else {\n      setVaccums(type);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: newJobs.map((newjob, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectJob\",\n      children: [index < 1 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" select job \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" select job \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"newJobs\",\n        id: `selectnewJobs${index + 1}`,\n        value: newJobs[index],\n        onChange: e => handelNewChanges(e, index, \"job\"),\n        children: jobs.map((job, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: job,\n          children: job\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), newJobs[index] == jobs[2] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectJob\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Vaccum Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"vaccum\",\n          id: `vaccum${index + 1}`,\n          value: vaccums[index],\n          children: vaccumTypes.map((vaccum, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: vaccum,\n            onClick: e => handelNewChanges(e, index, {\n              vaccum\n            }),\n            children: vaccum\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), newJobs.length - 1 === index && newJobs.length < 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        href: \"\",\n        className: \"selectJob__addbtn\",\n        onClick: handleJobAdd,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"small-svg\",\n          fill: \"#4A4A4A\",\n          children: /*#__PURE__*/_jsxDEV(\"use\", {\n            xlinkHref: \"img/blackbox.svg#addbtn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add new job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}; // Third Section of the Modal box where use can load vaccum cover and create a job\n\n\n_s(Selectjob, \"uS4JWonsr8fVNETuiFOkdweteGE=\");\n\n_c2 = Selectjob;\n\nconst SelectVaccum = props => {\n  _s2();\n\n  const [vaccumCovers, setVaccumCovers] = useState([\"\"]);\n  const items = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]; // this function update the state and store the user selected cover into vaccumCovers array\n\n  const handelNewChanges = (e, index) => {\n    const {\n      value\n    } = e.target;\n    const covers = [...vaccumCovers];\n    covers[index] = value;\n    setVaccumCovers(covers);\n  }; // Filter out the empty elements of the array\n\n\n  const filterVaccumCovers = vaccumCovers.filter(e => {\n    return e !== null && e !== undefined && e !== \"\";\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selectVaccum\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Load Vaccum Cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectVaccum__vaccum-cover\",\n      children: items.map((item, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", item]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), Array.apply(0, Array(13)).map((num, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: `${item}${i + 1}`,\n            name: `vaccum_cover-${item}`,\n            value: `${item}${i + 1}`,\n            onClick: e => handelNewChanges(e, index)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectVaccum__selectedCover\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Columns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), filterVaccumCovers.map((cover, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [filterVaccumCovers.length - 1 != index && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [cover, \", \"]\n        }, void 0, true), filterVaccumCovers.length - 1 === index && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" \", cover]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(SelectVaccum, \"enruXKmt12bxNaAmP5pM6bw/kwg=\");\n\n_c3 = SelectVaccum;\n\nconst Modal = props => {\n  _s3();\n\n  const [showAddJob, setShowAddJob] = useState(true);\n  const [showSelectJob, setShowSelectJob] = useState(false);\n  const [showSelectVaccum, setShowSelectVaccum] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    onClick: () => {\n      setShowAddJob(true);\n      setShowSelectJob(false);\n      props.hideModal(false);\n    } //for closing and reseting the modal box when clicked outside the box\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal__container\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal__title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"big-svg\",\n          fill: \"#4A4A4A\",\n          onClick: () => {\n            props.hideModal(false);\n          } // closes the modal box when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"use\", {\n            xlinkHref: \"img/blackbox.svg#close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal__body\",\n        children: [showAddJob && /*#__PURE__*/_jsxDEV(Addjob, {\n          showSelectJob: setShowSelectJob,\n          hideSelf: setShowAddJob\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), \" \", showSelectJob && /*#__PURE__*/_jsxDEV(Selectjob, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 29\n        }, this), \" \", showSelectVaccum && /*#__PURE__*/_jsxDEV(SelectVaccum, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 32\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal__btns\",\n        children: [showAddJob == false && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowAddJob(true);\n            setShowSelectJob(false);\n            props.hideModal(false);\n          } // closes and reset the modal box\n          ,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), showSelectJob == true && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowSelectJob(false);\n            setShowSelectVaccum(true);\n          },\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), showSelectVaccum == true && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowSelectJob(false);\n            setShowSelectVaccum(true);\n          },\n          children: \"Create Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(Modal, \"UJ3bKxYKRCLX0lu2VjwnK0iYeqA=\");\n\n_c4 = Modal;\nexport default Modal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Addjob\");\n$RefreshReg$(_c2, \"Selectjob\");\n$RefreshReg$(_c3, \"SelectVaccum\");\n$RefreshReg$(_c4, \"Modal\");","map":{"version":3,"sources":["H:/React/blackbox-react/src/components/Modal.jsx"],"names":["React","useState","Addjob","props","showSelectJob","hideSelf","Selectjob","jobs","vaccumTypes","newJobs","setNewJobs","vaccums","setVaccums","console","log","handleJobAdd","handelNewChanges","e","index","type","value","target","map","newjob","job","vaccum","length","SelectVaccum","vaccumCovers","setVaccumCovers","items","covers","filterVaccumCovers","filter","undefined","item","Array","apply","num","i","cover","Modal","showAddJob","setShowAddJob","setShowSelectJob","showSelectVaccum","setShowSelectVaccum","hideModal","stopPropagation"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// firts Section of the modal box where users can choose file or add job manually\r\nconst Addjob = (props) => {\r\n  return (\r\n    <div className=\"addJob\">\r\n      <button className=\"addJob__file\">load from file</button>\r\n      <button\r\n        className=\"addJob__manually\"\r\n        onClick={() => {\r\n          props.showSelectJob(true);\r\n          props.hideSelf(false);\r\n        }}\r\n      >\r\n        create jobs manually\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Second Section of the modal box where user selects the jobs to be created\r\nconst Selectjob = (props) => {\r\n  const jobs = [\r\n    \"Create three circles\",\r\n    \"Cut the circles in the middle\",\r\n    \"Load Vaccum\",\r\n  ]; //All the jobs that can be assigned\r\n  const vaccumTypes = [\"Vaccum 1\", \"Vaccum 2\", \"Vaccum 3\"];\r\n  const [newJobs, setNewJobs] = useState([jobs[0]]); //to get all the jobs selected by user in \"newJobs \"array\r\n  const [vaccums, setVaccums] = useState(vaccumTypes[0]); //to get the vaccum type selected by user\r\n\r\n  console.log(newJobs);\r\n  console.log(vaccums);\r\n\r\n  // This function enable to select multi job when add new job button is clicked\r\n  const handleJobAdd = () => {\r\n    setNewJobs([...newJobs, \"\"]);\r\n  };\r\n\r\n  // This function helps to get the user selected data from dropdown and update a state.\r\n  const handelNewChanges = (e, index, type) => {\r\n    const { value } = e.target;\r\n    if (type == \"job\") {\r\n      const jobs = [...newJobs];\r\n      jobs[index] = value;\r\n      setNewJobs(jobs);\r\n      setVaccums(\"\");\r\n    } else {\r\n      setVaccums(type);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {newJobs.map((newjob, index) => (\r\n        <div className=\"selectJob\">\r\n          {index < 1 && <h3> select job </h3>}\r\n          {index > 0 && <h3> select job {index + 1}</h3>}\r\n          <br />\r\n          <select\r\n            name=\"newJobs\"\r\n            id={`selectnewJobs${index + 1}`}\r\n            value={newJobs[index]}\r\n            onChange={(e) => handelNewChanges(e, index, \"job\")}\r\n          >\r\n            {jobs.map((job, index) => (\r\n              <option key={index} value={job}>\r\n                {job}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          {/* //dependent dropdrown  */}\r\n          {newJobs[index] == jobs[2] && (\r\n            <div className=\"selectJob\">\r\n              <br />\r\n              <h3>Vaccum Type</h3>\r\n              <br />\r\n              <select\r\n                name=\"vaccum\"\r\n                id={`vaccum${index + 1}`}\r\n                value={vaccums[index]}\r\n              >\r\n                {vaccumTypes.map((vaccum, index) => (\r\n                  <option\r\n                    key={index}\r\n                    value={vaccum}\r\n                    onClick={(e) => handelNewChanges(e, index, { vaccum })}\r\n                  >\r\n                    {vaccum}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* this condition will only let the user to add max 3 jobs by disabling or  hidding the add new job after user select max 3 jobs */}\r\n          {newJobs.length - 1 === index && newJobs.length < 3 && (\r\n            <div href=\"\" className=\"selectJob__addbtn\" onClick={handleJobAdd}>\r\n              <svg className=\"small-svg\" fill=\"#4A4A4A\">\r\n                <use xlinkHref=\"img/blackbox.svg#addbtn\"></use>\r\n              </svg>\r\n              <span>Add new job</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// Third Section of the Modal box where use can load vaccum cover and create a job\r\nconst SelectVaccum = (props) => {\r\n  const [vaccumCovers, setVaccumCovers] = useState([\"\"]);\r\n  const items = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\r\n\r\n  // this function update the state and store the user selected cover into vaccumCovers array\r\n  const handelNewChanges = (e, index) => {\r\n    const { value } = e.target;\r\n    const covers = [...vaccumCovers];\r\n    covers[index] = value;\r\n\r\n    setVaccumCovers(covers);\r\n  };\r\n\r\n  // Filter out the empty elements of the array\r\n  const filterVaccumCovers = vaccumCovers.filter((e) => {\r\n    return e !== null && e !== undefined && e !== \"\";\r\n  });\r\n\r\n  return (\r\n    <div className=\"selectVaccum\">\r\n      <h3>Load Vaccum Cover</h3>\r\n\r\n      <div className=\"selectVaccum__vaccum-cover\">\r\n        {items.map((item, index) => (\r\n          <>\r\n            <h2 key={index}>\r\n              <span> {item}</span>\r\n              {Array.apply(0, Array(13)).map((num, i) => (\r\n                <input\r\n                  key={i}\r\n                  type=\"radio\"\r\n                  id={`${item}${i + 1}`}\r\n                  name={`vaccum_cover-${item}`}\r\n                  value={`${item}${i + 1}`}\r\n                  onClick={(e) => handelNewChanges(e, index)}\r\n                />\r\n              ))}\r\n            </h2>\r\n          </>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Displays the user selected columns  */}\r\n      <div className=\"selectVaccum__selectedCover\">\r\n        <h3>Selected Columns</h3>\r\n        <br />\r\n\r\n        {filterVaccumCovers.map((cover, index) => (\r\n          <span>\r\n            {filterVaccumCovers.length - 1 != index && <>{cover}, </>}\r\n            {filterVaccumCovers.length - 1 === index && <> {cover}</>}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Modal = (props) => {\r\n  const [showAddJob, setShowAddJob] = useState(true);\r\n  const [showSelectJob, setShowSelectJob] = useState(false);\r\n  const [showSelectVaccum, setShowSelectVaccum] = useState(false);\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      onClick={() => {\r\n        setShowAddJob(true);\r\n        setShowSelectJob(false);\r\n        props.hideModal(false);\r\n      }} //for closing and reseting the modal box when clicked outside the box\r\n    >\r\n      <div className=\"modal__container\" onClick={(e) => e.stopPropagation()}>\r\n        {/* Preventing the close of modal box when clicked inside the box */}\r\n        <div className=\"modal__title\">\r\n          <h3>Add job</h3>\r\n\r\n          <svg\r\n            className=\"big-svg\"\r\n            fill=\"#4A4A4A\"\r\n            onClick={() => {\r\n              props.hideModal(false);\r\n            }}\r\n            // closes the modal box when clicked\r\n          >\r\n            <use xlinkHref=\"img/blackbox.svg#close\"></use>\r\n          </svg>\r\n        </div>\r\n        <div className=\"modal__body\">\r\n          {showAddJob && (\r\n            <Addjob showSelectJob={setShowSelectJob} hideSelf={setShowAddJob} />\r\n          )}{\" \"}\r\n          {/* Shows 1st secton of modal box when true */}\r\n          {showSelectJob && <Selectjob />}{\" \"}\r\n          {/* Shows 2nd secton of modal box i.e. selecting the jobs to be created when true */}\r\n          {showSelectVaccum && <SelectVaccum />}{\" \"}\r\n          {/* Shows 3rd secton of modal box i.e. selecting the vaccum cover when the result is true */}\r\n        </div>\r\n        <div className=\"modal__btns\">\r\n          {showAddJob == false && (\r\n            <button\r\n              onClick={() => {\r\n                setShowAddJob(true);\r\n                setShowSelectJob(false);\r\n                props.hideModal(false);\r\n              }}\r\n              // closes and reset the modal box\r\n            >\r\n              Cancel\r\n            </button>\r\n          )}\r\n\r\n          {showSelectJob == true && (\r\n            <button\r\n              onClick={() => {\r\n                setShowSelectJob(false);\r\n                setShowSelectVaccum(true);\r\n              }}\r\n            >\r\n              Next\r\n            </button>\r\n          )}\r\n          {showSelectVaccum == true && (\r\n            <button\r\n              onClick={() => {\r\n                setShowSelectJob(false);\r\n                setShowSelectVaccum(true);\r\n              }}\r\n            >\r\n              Create Job\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n"]},"metadata":{},"sourceType":"module"}